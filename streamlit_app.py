# -*- coding: utf-8 -*-
"""A*_final_streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o0Kh1PtWCYJaJtqkIT9RgS0umuyO_WGp
"""

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import streamlit as st

# Load the dataset
dataset_path = 'final_career.csv'  # Update the path as needed
df = pd.read_csv(dataset_path)

# Function for realistic career recommendation
def realistic_career_recommendation(user_input):
    path = []
    career = ""
    
    # Logic for career recommendation
    if user_input['Group'] == 'Science':
        if user_input['Math_Score'] == 'High' and user_input['Tech_Interest'] == 'Yes':
            career = 'Engineer'
            path = [('Group', 'Science'), ('Math_Score', 'High'), ('Tech_Interest', 'Yes')]
        elif user_input['Math_Score'] == 'High' and user_input['Tech_Interest'] == 'No':
            career = 'Research Scientist'
            path = [('Group', 'Science'), ('Math_Score', 'High'), ('Tech_Interest', 'No')]
        elif user_input['Math_Score'] == 'Medium' and user_input['Experience'] in ['1 year', '2 years']:
            career = 'Programmer'
            path = [('Group', 'Science'), ('Math_Score', 'Medium'), ('Experience', user_input['Experience'])]
        else:
            career = 'Laboratory Technician'
            path = [('Group', 'Science'), ('Experience', 'No experience')]

    elif user_input['Group'] == 'Commerce':
        if user_input['Math_Score'] == 'High' and user_input['Experience'] == 'No experience':
            career = 'Financial Analyst'
            path = [('Group', 'Commerce'), ('Math_Score', 'High'), ('Experience', 'No experience')]
        elif user_input['Math_Score'] in ['Medium', 'Low'] and user_input['Experience'] in ['1 year', '2 years']:
            career = 'Banker'
            path = [('Group', 'Commerce'), ('Math_Score', user_input['Math_Score']), ('Experience', user_input['Experience'])]
        else:
            career = 'Sales Manager'
            path = [('Group', 'Commerce'), ('Experience', '3 years')]

    elif user_input['Group'] == 'Humanities':
        if user_input['Creativity'] == 'High' and user_input['Experience'] in ['2 years', '3 years']:
            career = 'Artist'
            path = [('Group', 'Humanities'), ('Creativity', 'High'), ('Experience', user_input['Experience'])]
        elif user_input['Creativity'] == 'Medium' and user_input['Experience'] in ['1 year', '2 years']:
            career = 'Journalist'
            path = [('Group', 'Humanities'), ('Creativity', 'Medium'), ('Experience', user_input['Experience'])]
        else:
            career = 'Content Writer'
            path = [('Group', 'Humanities'), ('Experience', '3 years')]

    else:
        career = 'Career Consultant'  # Default fallback if no match
        path = [('Group', user_input['Group']), ('Experience', 'No experience')]

    return career, path

# Streamlit UI for user input
st.title('Career Recommendation System')

# Correct dropdown options for user input
group = st.selectbox('Select Group', ['Science', 'Commerce', 'Humanities'])
math_score = st.selectbox('Select Math Score', ['High', 'Medium', 'Low'])
creativity = st.selectbox('Select Creativity', ['High', 'Medium', 'Low'])
experience = st.selectbox('Select Experience', ['No experience', '1 year', '2 years', '3 years', '4 years', '5 years'])
tech_interest = st.selectbox('Select Tech Interest', ['Yes', 'No'])
location = st.selectbox('Select Location Preference', ['Urban', 'Rural'])
salary_expectation = st.selectbox('Select Salary Expectation', ['Low', 'Medium', 'High'])
education_level = st.selectbox('Select Education Level', ['Undergraduate', 'Postgraduate'])
communication_skills = st.selectbox('Select Communication Skills', ['Good', 'Poor'])

# Button to get recommendation
if st.button('Get Career Recommendation'):
    user_input = {
        'Group': group,
        'Math_Score': math_score,
        'Creativity': creativity,
        'Experience': experience,
        'Tech_Interest': tech_interest,
        'Location': location,
        'Salary_Expectation': salary_expectation,
        'Education_Level': education_level,
        'Communication_Skills': communication_skills
    }

    # Get career and decision path
    career, path = realistic_career_recommendation(user_input)

    # Display career recommendation and path
    st.write(f"Recommended Career: {career}")
    st.write(f"Decision Path: {path}")

    # Create and display decision path graph
    G = nx.DiGraph()
    for i in range(len(path)-1):
        G.add_edge(f"{path[i][0]}={path[i][1]}", f"{path[i+1][0]}={path[i+1][1]}")
    G.add_edge(f"{path[-1][0]}={path[-1][1]}", f"Career={career}")

    # Plot the graph
    fig, ax = plt.subplots(figsize=(10, 6))
    pos = nx.spring_layout(G, seed=42)
    nx.draw(G, pos, with_labels=True, node_size=3000, node_color='skyblue', font_size=10, font_weight='bold', edge_color='gray', ax=ax)
    plt.title(f"A* Path to Career: {career}", fontsize=14)
    st.pyplot(fig)
