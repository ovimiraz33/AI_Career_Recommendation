# -*- coding: utf-8 -*-
"""A*_final_streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o0Kh1PtWCYJaJtqkIT9RgS0umuyO_WGp
"""

# streamlit_app.py
import streamlit as st
import pandas as pd
import heapq
import networkx as nx
import matplotlib.pyplot as plt

# Read dataset
df = pd.read_csv('Updated_career_dataset.csv')  # Place CSV in same folder

# Build graph
def build_graph_from_dataset(df):
    G = {}
    for _, row in df.iterrows():
        path = [
            f"Group={row['Group']}",
            f"Math={row['Math_Score']}",
            f"Tech={row['Tech_Interest']}",
            f"Creativity={row['Creativity']}",
            f"Experience={row['Experience']}",
            f"Career={row['Career']}"
        ]
        for i in range(len(path) - 1):
            src = path[i]
            dst = path[i + 1]
            if src not in G:
                G[src] = []
            if dst not in [node for node, _ in G[src]]:
                G[src].append((dst, 1))  # uniform cost
    return G

# Heuristic
def build_heuristics(G):
    return {node: 0 if node.startswith("Career=") else 1 for node in G}

# A* Search (return top-N)
def a_star_top_k(graph, heuristics, start_node, goal_prefix="Career=", k=3):
    frontier = []
    heapq.heappush(frontier, (0, start_node, []))
    visited = set()
    results = []

    while frontier and len(results) < k:
        f_score, current, path = heapq.heappop(frontier)
        path = path + [current]
        if current.startswith(goal_prefix) and path not in results:
            results.append((path, f_score))
            continue
        if current in visited:
            continue
        visited.add(current)

        for neighbor, cost in graph.get(current, []):
            g = len(path)
            h = heuristics.get(neighbor, 1)
            f = g + h
            heapq.heappush(frontier, (f, neighbor, path))

    return results

# Streamlit UI
st.title("Career Recommendation using A* Search")
st.markdown("Select your attributes to get top-3 recommended career paths.")

# Dropdowns
group = st.selectbox("Select Group", sorted(df['Group'].unique()))
math = st.selectbox("Math Score", sorted(df['Math_Score'].unique()))
tech = st.selectbox("Tech Interest", sorted(df['Tech_Interest'].unique()))
creativity = st.selectbox("Creativity", sorted(df['Creativity'].unique()))
experience = st.selectbox("Experience", sorted(df['Experience'].unique()))

# On click
if st.button("Recommend Career"):
    user_input = {
        'Group': group,
        'Math_Score': math,
        'Tech_Interest': tech,
        'Creativity': creativity,
        'Experience': experience
    }

    filtered_df = df.copy()
    for key, value in user_input.items():
        filtered_df = filtered_df[filtered_df[key] == value]

    G = build_graph_from_dataset(filtered_df)
    H = build_heuristics(G)
    start_node = f"Group={group}"
    results = a_star_top_k(G, H, start_node, k=3)

    if results:
        for idx, (path, cost) in enumerate(results, 1):
            st.markdown(f"### ðŸ”¹ Career Option {idx}")
            st.write(" â†’ ".join(path))
            st.write(f"Total Cost: {cost}")

            # Draw path
            Gviz = nx.DiGraph()
            for i in range(len(path) - 1):
                Gviz.add_edge(path[i], path[i + 1])
            fig, ax = plt.subplots(figsize=(10, 4))
            pos = nx.spring_layout(Gviz, seed=42)
            nx.draw(Gviz, pos, with_labels=True, node_color='skyblue', node_size=3000,
                    font_size=9, font_weight='bold', edge_color='gray', ax=ax)
            st.pyplot(fig)
    else:
        st.warning("No career path found for the selected attributes.")


